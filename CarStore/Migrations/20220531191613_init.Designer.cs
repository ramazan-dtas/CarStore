// <auto-generated />
using System;
using CarStore.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarStore.Migrations
{
    [DbContext(typeof(AbContext))]
    [Migration("20220531191613_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarStore.Database.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Mclaren"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Mercedes"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Rolls-Royce"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Bugatti"
                        });
                });

            modelBuilder.Entity("CarStore.Database.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressName = "Telegrafvej 9",
                            CityName = "Ballerup",
                            UserId = 1,
                            ZipCode = "2750"
                        },
                        new
                        {
                            Id = 2,
                            AddressName = "Karlsgårdsvej 17",
                            CityName = "Helsingør",
                            UserId = 2,
                            ZipCode = "3000"
                        });
                });

            modelBuilder.Entity("CarStore.Database.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderDateTime = new DateTime(2022, 5, 31, 21, 16, 13, 54, DateTimeKind.Local).AddTicks(7586),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderDateTime = new DateTime(2022, 5, 31, 21, 16, 13, 54, DateTimeKind.Local).AddTicks(7625),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("CarStore.Database.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            Price = 7500,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            Price = 6500,
                            ProductId = 1,
                            Quantity = 22
                        });
                });

            modelBuilder.Entity("CarStore.Database.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(528)");

                    b.Property<int>("Km")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Flot Bil",
                            Km = 100,
                            Price = 1000000,
                            ProductName = "McLaren 720s",
                            ProductionYear = 2020
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Flot Bil",
                            Km = 0,
                            Price = 1000000,
                            ProductName = "McLaren P1",
                            ProductionYear = 2019
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "Flot Bil",
                            Km = 0,
                            Price = 10000000,
                            ProductName = "Mercedes C63S",
                            ProductionYear = 2021
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "Flot Bil",
                            Km = 10000,
                            Price = 1000000,
                            ProductName = "Mercedes-AMG GT",
                            ProductionYear = 2018
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "Flot Bil",
                            Km = 10,
                            Price = 10000000,
                            ProductName = "Rolls-Royce Phantom",
                            ProductionYear = 2021
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            Description = "Flot Bil",
                            Km = 1000,
                            Price = 10000000,
                            ProductName = "Bugatti Chiron",
                            ProductionYear = 2016
                        });
                });

            modelBuilder.Entity("CarStore.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Ramazan@admin.com",
                            Password = "Passw0rd",
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "Ramazan@user.com",
                            Password = "Passw0rd",
                            Role = 2
                        });
                });

            modelBuilder.Entity("CarStore.Database.Entities.Customer", b =>
                {
                    b.HasOne("CarStore.Database.Entities.User", "User")
                        .WithMany("Customer")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarStore.Database.Entities.Order", b =>
                {
                    b.HasOne("CarStore.Database.Entities.User", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarStore.Database.Entities.OrderItem", b =>
                {
                    b.HasOne("CarStore.Database.Entities.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarStore.Database.Entities.Product", "Product")
                        .WithMany("OrderItem")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CarStore.Database.Entities.Product", b =>
                {
                    b.HasOne("CarStore.Database.Entities.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CarStore.Database.Entities.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("CarStore.Database.Entities.Order", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("CarStore.Database.Entities.Product", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("CarStore.Database.Entities.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
